package rookies.ecommerce.service.product;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import rookies.ecommerce.dto.projection.product.ProductWithCategoryNameProjection;
import rookies.ecommerce.dto.request.product.CreateProductRequest;
import rookies.ecommerce.dto.request.product.UpdateProductRequest;
import rookies.ecommerce.dto.response.product.ProductDetailResponse;
import rookies.ecommerce.entity.Category;
import rookies.ecommerce.entity.Product;
import rookies.ecommerce.exception.AppException;
import rookies.ecommerce.exception.ErrorCode;
import rookies.ecommerce.repository.ProductRepository;
import rookies.ecommerce.service.category.CategoryService;
import rookies.ecommerce.service.upload.UploadService;

import java.io.IOException;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class ProductServiceImpl implements ProductService {

    ProductRepository productRepository;
    UploadService cloudinaryService;
    CategoryService categoryService;

    @Override
    public Page<ProductWithCategoryNameProjection> getActiveProducts(int page, int size) {
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        return productRepository.findAllByIsDeletedFalse(pageable);
    }

    @Override
    public Product getProductById(UUID id) {
        return productRepository.findByIdAndIsDeletedFalse(id)
                .orElseThrow(() -> new AppException(ErrorCode.PRODUCT_NOT_FOUND, HttpStatus.NOT_FOUND));
    }

    @Override
    public ProductDetailResponse getProductDetailById(UUID id) {
        Product product = getProductById(id);
        Category category = product.getCategory();
        return ProductDetailResponse.builder()
                .categoryName(category.getName())
                .name(product.getName())
                .price(product.getPrice())
                .quantity(product.getQuantity())
                .description(product.getDescription())
                .imageUrl(product.getImageUrl())
                .isFeatured(product.isFeatured())
                .createdAt(product.getCreatedAt())
                .updatedAt(product.getUpdatedAt())
                .build();
    }

    @Override
    @Transactional
    public void createProduct(CreateProductRequest productDTO, MultipartFile image) throws IOException {
        String imageUrl = cloudinaryService.uploadImage(image);

        Category category = categoryService.getCategoryById(productDTO.getCategoryId());

        Product product = Product.builder()
                .category(category)
                .name(productDTO.getName())
                .description(productDTO.getDescription())
                .imageUrl(imageUrl)
                .price(productDTO.getPrice())
                .quantity(productDTO.getQuantity())
                .isFeatured(productDTO.isFeatured())
                .build();

        productRepository.save(product);
    }

    @Override
    @Transactional
    public void updateProduct(UUID id, UpdateProductRequest productDTO, MultipartFile image) throws IOException {
        Product product = productRepository.findByIdAndIsDeletedFalse(id)
                .orElseThrow(() -> new AppException(ErrorCode.PRODUCT_NOT_FOUND, HttpStatus.NOT_FOUND));

        Category category = categoryService.getCategoryById(productDTO.getCategoryId());

        String imageUrl = product.getImageUrl();
        if (image != null && !image.isEmpty()) {
            // Delete old image if it exists
            if (imageUrl != null && !imageUrl.isEmpty()) {
                cloudinaryService.deleteImage(imageUrl);
            }
            imageUrl = cloudinaryService.uploadImage(image);
        }

        product.setCategory(category);
        product.setName(productDTO.getName());
        product.setDescription(productDTO.getDescription());
        product.setImageUrl(imageUrl);
        product.setPrice(productDTO.getPrice());
        product.setQuantity(productDTO.getQuantity());
        product.setFeatured(productDTO.isFeatured());

        productRepository.save(product);
    }

    @Override
    @Transactional
    public void deleteProduct(UUID id) {
        Product product = productRepository.findByIdAndIsDeletedFalse(id)
                .orElseThrow(() ->new AppException(ErrorCode.PRODUCT_NOT_FOUND, HttpStatus.NOT_FOUND));

        product.setIsDeleted(true);

        productRepository.save(product);
    }
}
